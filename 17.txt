作用域
如果一个变量再def内赋值，它被定位在这个函数内
如果一个变量在一个嵌套的def中赋值，对于嵌套的函数来说，它是非本地的
如果在def之外赋值，它就是整个文件全局的
作用域法则
函数定义了本地作用域，模块定义的是全局作用域
内嵌的模块是全局作用域
全局作用域的作用范围仅限于单个文件


每次对函数的调用都创建了一个新的本地作用域


赋值的变量名除非声称为全局变量或者非本地变量，否则均为本地变量
所有其他的变量名都可以归纳为本地全局或者内置的

原处改变对象并不会把变量划分为本地变量，只有对变量的赋值才可以。名称和对象之前的区分：修改一个对象并不是对一个名称赋值
变量名解析：LEGB原则

内置作用域变量名
import builtins
dir(builtins)

嵌套作用域
一个引用首先在本地作用域查找变量名，之后会在代码的语法上嵌套了的函数中的本地作用域，从内到外查找，之后是全局和内置作用域
默认情况下，一个赋值会创建或者改变变量名的当前作用域，声明为全局变量的话会创建或者修改变量名为整个模块的作用域。如果声明为nonlocal，赋值会修改最近的嵌套函数的本地作用域

工厂函数
def maker(n):
	def action(x):
		return x**n
	return action
闭包或者叫工厂函数，能够记住嵌套作用域的变量值的函数

def makeActions():
	acts=[]
	for i in range(5)
		acts.append(lambda x: i**x)
	returns acts



嵌套作用域中的变量在嵌套的函数被调用时才进行查询



使用函数属性的状态来作为保持状态的选项
def tester(start):
	def nested(labal):
		print(labal,nested.state)
		nested.state+=1
	nested.state=start
	return nested

在一条nonlocal语句中声明嵌套的作用域，似的嵌套的函数能够赋值。