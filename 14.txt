迭代器和解析
可迭代的：如果对象是实际保存的序列，或者可以在迭代工具环境中一次产生一个结果的对象，就看做是可迭代的。

术语可迭代的有时候指支持iter的一个对象，而迭代器指iter所返回的一个支持next(i)的对象

迭代协议：有__next__方法的对象会前进到下一个结果，而在一系列结果的末尾时，则引发StopIteration.

for循环开始时，会通过它传给iter内置函数，以便从可迭代对象中获得一个迭代器，返回的对象含有需要的next方法。

列表以及很多其他的内置对象（包括range），不是自身的迭代器，因为它们支持多次打开迭代器，像这样的对象，必须调用iter来启动迭代

map,zip,filter,open()等返回的迭代对象是自身的迭代器，只能进行一次迭代。

迭代环境：列表解析（以及其他各种解析）、in成员关系测试、map，zip，sorted内置函数，filter、reduce、enumerate，sum，max，min等
python的内置工具集中从左到右地扫描一个对象的每项工具，都定义为在主体对象上使用了迭代协议。list，tuple，字符串join方法，甚至包括序列赋值都是。

通过针对iter调用返回一个新的对象，来支持多个迭代器；单个的迭代器一般意味着一个对象返回其自身。（生成器函数和表达式只支持单次迭代）
